
resource "aws_alb" "main" {
    name = "cb-load-balancer"
    subnets = aws_subnet.public.*.id
    security_groups = [aws_security_group.lb.id]
}




#### Target Groups


resource "aws_alb_target_group" "service" {
  for_each = local.services

  name        = "${each.key}-target-group"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = aws_vpc.main.id
  target_type = "ip"

  health_check {
    healthy_threshold   = 3
    interval            = 30
    protocol            = "HTTP"
    matcher             = "200"
    timeout             = 3
    path                = var.health_check_path
    unhealthy_threshold = 2
  }
}


### Listener

resource "aws_alb_listener" "front_end" {
  load_balancer_arn = aws_alb.main.id
  port              = var.app_port
  protocol          = "HTTP"

  default_action {
      target_group_arn = aws_alb_target_group.service["user"].arn
      type             = "forward"
  }
}




#### Path rules
resource "aws_alb_listener_rule" "routes" {
  for_each     = local.alb_paths
  listener_arn = aws_alb_listener.front_end.arn
  priority     = lookup({auth=10, user=20, ticket=30, event=40}, each.key, 50)

  action {
    type             = "forward"
    target_group_arn = aws_alb_target_group.service[each.key].arn
  }

  condition {
    path_pattern {
      values = [each.value]
    }
  }
}





resource "aws_appautoscaling_target" "target" {
  for_each             = local.services
  service_namespace    = "ecs"
  resource_id          = "service/${aws_ecs_cluster.main.name}/${aws_ecs_service.service[each.key].name}"
  scalable_dimension   = "ecs:service:DesiredCount"
  role_arn             = aws_iam_role.ecs_auto_scale_role.arn
  min_capacity         = local.scale_config.min_capacity
  max_capacity         = local.scale_config.max_capacity
}




resource "aws_appautoscaling_policy" "scale_up" {
  for_each             = local.services
  name                 = "${each.key}-scale-up"
  service_namespace    = "ecs"
  resource_id          = "service/${aws_ecs_cluster.main.name}/${aws_ecs_service.service[each.key].name}"
  scalable_dimension   = "ecs:service:DesiredCount"

  step_scaling_policy_configuration {
    adjustment_type         = "ChangeInCapacity"
    cooldown                = 60
    metric_aggregation_type = "Maximum"

    step_adjustment {
      metric_interval_lower_bound = 0
      scaling_adjustment          = 1
    }
  }

  depends_on = [aws_appautoscaling_target.target]
}





resource "aws_appautoscaling_policy" "scale_down" {
  for_each             = local.services
  name                 = "${each.key}-scale-down"
  service_namespace    = "ecs"
  resource_id          = "service/${aws_ecs_cluster.main.name}/${aws_ecs_service.service[each.key].name}"
  scalable_dimension   = "ecs:service:DesiredCount"

  step_scaling_policy_configuration {
    adjustment_type         = "ChangeInCapacity"
    cooldown                = 60
    metric_aggregation_type = "Maximum"

    step_adjustment {
      metric_interval_lower_bound = 0
      scaling_adjustment          = -1
    }
  }

  depends_on = [aws_appautoscaling_target.target]
}





resource "aws_cloudwatch_metric_alarm" "high_cpu" {
  for_each             = local.services
  alarm_name           = "${each.key}-high-cpu"
  comparison_operator  = "GreaterThanOrEqualToThreshold"
  evaluation_periods   = 2
  metric_name          = "CPUUtilization"
  namespace            = "AWS/ECS"
  period               = 60
  statistic            = "Average"
  threshold            = local.scale_config.scale_up_threshold

  dimensions = {
    ClusterName = aws_ecs_cluster.main.name
    ServiceName = aws_ecs_service.service[each.key].name
  }

  alarm_actions = [aws_appautoscaling_policy.scale_up[each.key].arn]
}

resource "aws_cloudwatch_metric_alarm" "low_cpu" {
  for_each             = local.services
  alarm_name           = "${each.key}-low-cpu"
  comparison_operator  = "LessThanOrEqualToThreshold"
  evaluation_periods   = 2
  metric_name          = "CPUUtilization"
  namespace            = "AWS/ECS"
  period               = 60
  statistic            = "Average"
  threshold            = local.scale_config.scale_down_threshold

  dimensions = {
    ClusterName = aws_ecs_cluster.main.name
    ServiceName = aws_ecs_service.service[each.key].name
  }

  alarm_actions = [aws_appautoscaling_policy.scale_down[each.key].arn]
}resource "aws_ecs_cluster" "main" {
    name = "ticket-cluster"
}

resource "aws_iam_role_policy_attachment" "ecs_task_logs" {
  role       = aws_iam_role.ecs_task_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}




resource "aws_ecs_task_definition" "service" {
  for_each                 = local.services
  family                   = each.value.family
  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = var.fargate_cpu
  memory                   = var.fargate_memory

  container_definitions = jsonencode([{
    name  = each.value.container_name
    image = each.value.image
    portMappings = [{
      containerPort = each.value.port
    }]
    logConfiguration = {
      logDriver = "awslogs"
      options = {
        awslogs-group         = "/ecs/cb-app"
        awslogs-region        = var.aws_region
        awslogs-stream-prefix = each.key
      }
    }
    essential = true
  }])

  depends_on = [aws_cloudwatch_log_group.ecs]
}



resource "aws_ecs_service" "service" {
  for_each       = local.services
  name           = "${each.key}-service"
  cluster        = aws_ecs_cluster.main.id
  task_definition = aws_ecs_task_definition.service[each.key].arn
  desired_count  = 2
  launch_type    = "FARGATE"

  network_configuration {
    security_groups  = [aws_security_group.ecs_tasks.id]
    subnets          = aws_subnet.private[*].id
    assign_public_ip = true
  }

load_balancer {
  target_group_arn = aws_alb_target_group.service[each.key].arn
  container_name   = each.value.container_name
  container_port   = each.value.port
}

  depends_on = [
    aws_alb_listener.front_end,
    aws_iam_role_policy_attachment.ecs-task-execution-role-policy-attachment
  ]
}
locals {
  services = {
    auth = {
      family         = "auth-service-family"
      image          = var.auth_image
      port           = var.auth_port
      container_name = "auth-service"
      template_file  = data.template_file.auth_service.rendered
    }
    user = {
      family         = "user-service-family"
      image          = var.user_image
      port           = var.user_port
      container_name = "user-service"
      template_file  = data.template_file.user_service.rendered
    }
    event = {
      family         = "event-service-family"
      image          = var.event_image
      port           = var.event_port
      container_name = "event-service"
      template_file  = data.template_file.event_service.rendered
    }
    ticket = {
      family         = "ticket-service-family"
      image          = var.ticket_image
      port           = var.ticket_port
      container_name = "ticket-service"
      template_file  = data.template_file.ticket_service.rendered
    }
  }

  alb_paths = {
    auth   = "/auth/*"
    user   = "/user/*"
    event  = "/event/*"
    ticket = "/ticket/*"
  }

  scale_config = {
    min_capacity          = 2
    max_capacity          = 3
    scale_up_threshold    = 85
    scale_down_threshold  = 10
  }
}
data "aws_availability_zones" "available" {
}

resource "aws_vpc" "main" {
    cidr_block = "172.17.0.0/16"
}

resource "aws_subnet" "private" {
    count = var.az_count
    cidr_block = cidrsubnet(aws_vpc.main.cidr_block, 8, count.index)
    availability_zone = data.aws_availability_zones.available.names[count.index]
    vpc_id = aws_vpc.main.id
}

resource "aws_subnet" "public" {
    count = var.az_count
    cidr_block = cidrsubnet(aws_vpc.main.cidr_block, 8, az_count + count.index)
    availability_zone = data.aws_availability_zones.available.names[count.index]
    vpc_id = aws_vpc.main.id
    map_public_ip_on_launch = true
}

resource "aws_internet_gateway" "gw" {
    vpc_id = aws_vpc.main.id
}

resource "aws_route" "internet_access" {
    route_table_id = aws_vpc.main.main_route_table_id
    destination_cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id

    depends_on = [aws_internet_gateway.gw]
}

resource "aws_eip" "nat" {
  count  = var.az_count
  domain = "vpc"
  depends_on = [aws_internet_gateway.gw]
}


resource "aws_nat_gateway" "gw" {
  count         = var.az_count
  subnet_id     = element(aws_subnet.public[*].id, count.index)
  allocation_id = aws_eip.nat[count.index].id
  depends_on    = [aws_internet_gateway.gw]
}



resource "aws_route_table" "private" {
  count  = var.az_count
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.gw[count.index].id
  }

  depends_on = [aws_nat_gateway.gw]
}


resource "aws_route_table_association" "private" {
    count = var.az_count
    subnet_id = element(aws_subnet.private.*.id, count.index)
    route_table_id = element(aws_route_table.private.*.id, count.index)
}provider "aws" {
    region     = var.aws_region
}
resource "aws_security_group" "lb" {
    name        = "cb-load-balancer-security-group"
    description = "controls access to the ALB"
    vpc_id      = aws_vpc.main.id

    ingress {
        protocol    = "tcp"
        from_port   = var.app_port
        to_port     = var.app_port
        cidr_blocks = ["0.0.0.0/0"]
    }

    egress {
        protocol    = "-1"
        from_port   = 0
        to_port     = 0
        cidr_blocks = ["0.0.0.0/0"]
    }
}


resource "aws_security_group" "ecs_tasks" {
    name        = "cb-ecs-tasks-security-group"
    description = "Inbound only from ALB"
    vpc_id      = aws_vpc.main.id

    ingress {
        protocol        = "tcp"
        from_port       = 5000
        to_port         = 5003
        security_groups = [aws_security_group.lb.id]
    }

    egress {
        protocol    = "-1"
        from_port   = 0
        to_port     = 0
        cidr_blocks = ["0.0.0.0/0"]
    }
}


aws_region = "us-east-2"variable "aws_region" {
    description = "us-east-2"
}

variable "az_count" {
    default = "2"
}


variable "app_port" {
    default = 80
}

variable "health_check_path" {
  default = "/"
}


variable "auth_image" {
    default = "public.ecr.aws/i4n6p6k3/eventapi/auth"
}

variable "auth_port" {
    default = 5000
}

variable "user_image" {
    default = "public.ecr.aws/i4n6p6k3/eventapi/user"
}

variable "user_port" {
    default = 5001
}

variable "event_image" {
    default = "public.ecr.aws/i4n6p6k3/eventapi/events"
}

variable "event_port" {
    default = 5002
}

variable "ticket_image" {
    default = "public.ecr.aws/i4n6p6k3/eventapi/tickets"
}

variable "ticket_port" {
    default = 5003
}


variable "fargate_cpu" {
    default = "1024"
}

variable "fargate_memory" {
    default = "2048"
}